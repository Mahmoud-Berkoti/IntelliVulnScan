from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, ForeignKey, Text, JSON
from sqlalchemy.orm import relationship
from datetime import datetime

from app.core.database import Base


class Vulnerability(Base):
    """Vulnerability model representing a detected vulnerability."""
    
    __tablename__ = "vulnerabilities"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    cve_id = Column(String(50), nullable=True)
    severity = Column(String(50), nullable=False)  # critical, high, medium, low, info
    cvss_score = Column(Float, nullable=True)
    cvss_vector = Column(String(255), nullable=True)
    
    # Relationships
    asset_id = Column(Integer, ForeignKey("assets.id"), nullable=False)
    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False)
    
    # Status
    status = Column(String(50), default="open")  # open, in_progress, fixed, false_positive, accepted_risk
    
    # Additional metadata
    exploit_available = Column(Boolean, default=False)
    exploit_maturity = Column(String(50), nullable=True)
    patch_available = Column(Boolean, default=False)
    affected_component = Column(String(255), nullable=True)
    affected_version = Column(String(255), nullable=True)
    
    # Business context
    business_impact = Column(String(50), nullable=True)  # critical, high, medium, low
    data_classification = Column(String(50), nullable=True)  # public, internal, confidential, restricted
    system_exposure = Column(String(50), nullable=True)  # internet-facing, internal, isolated
    
    # ML prioritization
    priority = Column(Float, default=0.0)  # ML-calculated priority score
    
    # Custom fields for additional data
    metadata = Column(JSON, nullable=True)
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    
    # Relationships
    asset = relationship("Asset", back_populates="vulnerabilities")
    scan = relationship("Scan", back_populates="vulnerabilities")
    
    def __repr__(self):
        return f"<Vulnerability {self.title} ({self.severity})>" 