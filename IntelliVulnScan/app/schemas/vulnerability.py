from typing import List, Optional, Dict, Any
from datetime import datetime
from pydantic import BaseModel, Field, validator


class VulnerabilityBase(BaseModel):
    """Base Vulnerability schema with common attributes."""
    
    title: str = Field(..., description="Title of the vulnerability")
    description: Optional[str] = Field(None, description="Detailed description of the vulnerability")
    cve_id: Optional[str] = Field(None, description="CVE ID if available")
    severity: str = Field(..., description="Severity level (critical, high, medium, low, info)")
    cvss_score: Optional[float] = Field(None, description="CVSS score if available", ge=0.0, le=10.0)
    cvss_vector: Optional[str] = Field(None, description="CVSS vector string")
    
    asset_id: int = Field(..., description="ID of the affected asset")
    scan_id: int = Field(..., description="ID of the scan that discovered this vulnerability")
    
    status: str = Field("open", description="Status of the vulnerability (open, in_progress, fixed, false_positive, accepted_risk)")
    
    # Additional metadata
    exploit_available: Optional[bool] = Field(None, description="Whether an exploit is publicly available")
    exploit_maturity: Optional[str] = Field(None, description="Maturity level of available exploits")
    patch_available: Optional[bool] = Field(None, description="Whether a patch is available")
    affected_component: Optional[str] = Field(None, description="Affected component or library")
    affected_version: Optional[str] = Field(None, description="Affected version of the component")
    
    # Business context
    business_impact: Optional[str] = Field(None, description="Impact on business (critical, high, medium, low)")
    data_classification: Optional[str] = Field(None, description="Classification of affected data (public, internal, confidential, restricted)")
    system_exposure: Optional[str] = Field(None, description="Exposure level of the affected system (internet-facing, internal, isolated)")
    
    # Custom fields for additional data
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Additional metadata as key-value pairs")
    
    @validator("severity")
    def validate_severity(cls, v):
        allowed_values = ["critical", "high", "medium", "low", "info"]
        if v.lower() not in allowed_values:
            raise ValueError(f"Severity must be one of {allowed_values}")
        return v.lower()
    
    @validator("status")
    def validate_status(cls, v):
        allowed_values = ["open", "in_progress", "fixed", "false_positive", "accepted_risk"]
        if v.lower() not in allowed_values:
            raise ValueError(f"Status must be one of {allowed_values}")
        return v.lower()


class VulnerabilityCreate(VulnerabilityBase):
    """Schema for creating a new vulnerability."""
    pass


class VulnerabilityUpdate(BaseModel):
    """Schema for updating an existing vulnerability."""
    
    title: Optional[str] = None
    description: Optional[str] = None
    severity: Optional[str] = None
    cvss_score: Optional[float] = None
    cvss_vector: Optional[str] = None
    status: Optional[str] = None
    
    exploit_available: Optional[bool] = None
    exploit_maturity: Optional[str] = None
    patch_available: Optional[bool] = None
    
    business_impact: Optional[str] = None
    data_classification: Optional[str] = None
    system_exposure: Optional[str] = None
    
    metadata: Optional[Dict[str, Any]] = None
    
    @validator("severity")
    def validate_severity(cls, v):
        if v is None:
            return v
        allowed_values = ["critical", "high", "medium", "low", "info"]
        if v.lower() not in allowed_values:
            raise ValueError(f"Severity must be one of {allowed_values}")
        return v.lower()
    
    @validator("status")
    def validate_status(cls, v):
        if v is None:
            return v
        allowed_values = ["open", "in_progress", "fixed", "false_positive", "accepted_risk"]
        if v.lower() not in allowed_values:
            raise ValueError(f"Status must be one of {allowed_values}")
        return v.lower()


class VulnerabilityResponse(VulnerabilityBase):
    """Schema for vulnerability response with additional fields."""
    
    id: int
    created_at: datetime
    updated_at: datetime
    
    class Config:
        orm_mode = True


class VulnerabilityPriorityResponse(VulnerabilityResponse):
    """Schema for vulnerability with priority score from ML model."""
    
    priority_score: float = Field(..., description="Priority score from ML model", ge=0.0, le=1.0)
    priority_factors: Dict[str, float] = Field(
        ..., 
        description="Factors contributing to the priority score"
    )
    recommended_action: str = Field(..., description="Recommended action based on priority") 