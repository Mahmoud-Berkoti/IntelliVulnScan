import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Box,
  Button,
  Paper,
  Typography,
  Grid,
  Chip,
  Divider,
  CircularProgress,
  Link,
  Card,
  CardContent,
  CardHeader,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableRow
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  BugReport as BugReportIcon,
  Computer as ComputerIcon,
  History as HistoryIcon,
  Security as SecurityIcon
} from '@mui/icons-material';
import axios from 'axios';
import { Vulnerability, VulnerabilityDetailData } from '../types';

const VulnerabilityDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [vulnerability, setVulnerability] = useState<VulnerabilityDetailData | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchVulnerabilityData = async () => {
      try {
        setLoading(true);
        const response = await axios.get(`/api/vulnerabilities/${id}`);
        setVulnerability(response.data);
        setError(null);
      } catch (err) {
        console.error('Error fetching vulnerability data:', err);
        setError('Failed to load vulnerability data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchVulnerabilityData();
    }
  }, [id]);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'error';
      case 'high':
        return 'warning';
      case 'medium':
        return 'info';
      case 'low':
        return 'success';
      default:
        return 'default';
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography color="error" variant="h6">{error}</Typography>
        <Button 
          variant="outlined" 
          startIcon={<ArrowBackIcon />} 
          onClick={() => navigate('/vulnerabilities')}
          sx={{ mt: 2 }}
        >
          Back to Vulnerabilities
        </Button>
      </Box>
    );
  }

  if (!vulnerability) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography variant="h6">Vulnerability not found</Typography>
        <Button 
          variant="outlined" 
          startIcon={<ArrowBackIcon />} 
          onClick={() => navigate('/vulnerabilities')}
          sx={{ mt: 2 }}
        >
          Back to Vulnerabilities
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
        <Box>
          <Button 
            variant="text" 
            startIcon={<ArrowBackIcon />} 
            onClick={() => navigate('/vulnerabilities')}
            sx={{ mb: 1 }}
          >
            Back to Vulnerabilities
          </Button>
          <Typography variant="h4">{vulnerability.title}</Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
            <Chip 
              label={vulnerability.severity} 
              color={getSeverityColor(vulnerability.severity) as any}
              sx={{ mr: 2 }}
            />
            {vulnerability.cve_id && (
              <Chip 
                label={vulnerability.cve_id} 
                sx={{ mr: 2 }}
              />
            )}
            <Chip 
              label={vulnerability.status} 
              variant="outlined"
            />
          </Box>
        </Box>
      </Box>

      {/* Vulnerability Description */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <BugReportIcon sx={{ mr: 1 }} />
          <Typography variant="h6">Vulnerability Description</Typography>
        </Box>
        <Divider sx={{ mb: 2 }} />
        <Typography variant="body1" sx={{ whiteSpace: 'pre-line' }}>
          {vulnerability.description}
        </Typography>
        
        <Box sx={{ mt: 3 }}>
          <Typography variant="subtitle1" sx={{ mb: 1 }}>Technical Details</Typography>
          <TableContainer component={Paper} variant="outlined">
            <Table size="small">
              <TableBody>
                <TableRow>
                  <TableCell component="th" scope="row" sx={{ width: '30%', bgcolor: 'action.hover' }}>
                    CVSS Score
                  </TableCell>
                  <TableCell>
                    {vulnerability.cvss_score}
                    {vulnerability.cvss_vector && (
                      <Typography variant="caption" display="block" sx={{ mt: 0.5 }}>
                        Vector: {vulnerability.cvss_vector}
                      </Typography>
                    )}
                  </TableCell>
                </TableRow>
                {vulnerability.affected_component && (
                  <TableRow>
                    <TableCell component="th" scope="row" sx={{ bgcolor: 'action.hover' }}>
                      Affected Component
                    </TableCell>
                    <TableCell>
                      {vulnerability.affected_component}
                      {vulnerability.affected_version && (
                        <Typography variant="caption" display="block">
                          Version: {vulnerability.affected_version}
                        </Typography>
                      )}
                    </TableCell>
                  </TableRow>
                )}
                <TableRow>
                  <TableCell component="th" scope="row" sx={{ bgcolor: 'action.hover' }}>
                    Exploit Available
                  </TableCell>
                  <TableCell>
                    {vulnerability.exploit_available !== undefined 
                      ? (vulnerability.exploit_available ? 'Yes' : 'No') 
                      : 'Unknown'}
                    {vulnerability.exploit_maturity && (
                      <Typography variant="caption" display="block">
                        Maturity: {vulnerability.exploit_maturity}
                      </Typography>
                    )}
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell component="th" scope="row" sx={{ bgcolor: 'action.hover' }}>
                    Patch Available
                  </TableCell>
                  <TableCell>
                    {vulnerability.patch_available !== undefined 
                      ? (vulnerability.patch_available ? 'Yes' : 'No') 
                      : 'Unknown'}
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell component="th" scope="row" sx={{ bgcolor: 'action.hover' }}>
                    Discovered Date
                  </TableCell>
                  <TableCell>
                    {new Date(vulnerability.discovered_date).toLocaleString()}
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Box>
      </Paper>

      {/* Asset and Scan Information */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        {vulnerability.asset && (
          <Grid item xs={12} md={6}>
            <Card>
              <CardHeader 
                avatar={<ComputerIcon />}
                title="Affected Asset"
                action={
                  <Button 
                    size="small" 
                    onClick={() => vulnerability.asset && navigate(`/assets/${vulnerability.asset.id}`)}
                    disabled={!vulnerability.asset}
                  >
                    View Asset
                  </Button>
                }
              />
              <Divider />
              <CardContent>
                <Typography variant="subtitle1">{vulnerability.asset.name}</Typography>
                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                  <Typography variant="body2" color="textSecondary" sx={{ mr: 2 }}>
                    Type: {vulnerability.asset.asset_type}
                  </Typography>
                  <Chip 
                    label={`Criticality: ${vulnerability.asset.criticality}`} 
                    color={getSeverityColor(vulnerability.asset.criticality) as any}
                    size="small" 
                  />
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
        
        {vulnerability.scan && (
          <Grid item xs={12} md={6}>
            <Card>
              <CardHeader 
                avatar={<HistoryIcon />}
                title="Discovery Scan"
                action={
                  <Button 
                    size="small" 
                    onClick={() => vulnerability.scan && navigate(`/scans/${vulnerability.scan.id}`)}
                    disabled={!vulnerability.scan}
                  >
                    View Scan
                  </Button>
                }
              />
              <Divider />
              <CardContent>
                <Typography variant="subtitle1">{vulnerability.scan.name}</Typography>
                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                  <Typography variant="body2" color="textSecondary" sx={{ mr: 2 }}>
                    Scanner: {vulnerability.scan.scanner_type}
                  </Typography>
                  <Typography variant="body2" color="textSecondary">
                    Date: {new Date(vulnerability.scan.created_at).toLocaleDateString()}
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
      </Grid>

      {/* Business Impact */}
      {(vulnerability.business_impact || vulnerability.data_classification || vulnerability.system_exposure) && (
        <Paper sx={{ p: 3, mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <SecurityIcon sx={{ mr: 1 }} />
            <Typography variant="h6">Business Impact</Typography>
          </Box>
          <Divider sx={{ mb: 2 }} />
          <Grid container spacing={2}>
            {vulnerability.business_impact && (
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle2" color="textSecondary">Business Impact</Typography>
                <Typography variant="body1">{vulnerability.business_impact}</Typography>
              </Grid>
            )}
            {vulnerability.data_classification && (
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle2" color="textSecondary">Data Classification</Typography>
                <Typography variant="body1">{vulnerability.data_classification}</Typography>
              </Grid>
            )}
            {vulnerability.system_exposure && (
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle2" color="textSecondary">System Exposure</Typography>
                <Typography variant="body1">{vulnerability.system_exposure}</Typography>
              </Grid>
            )}
          </Grid>
        </Paper>
      )}

      {/* References */}
      {vulnerability.cve_id && (
        <Paper sx={{ p: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6">References</Typography>
          </Box>
          <Divider sx={{ mb: 2 }} />
          <Box>
            <Typography variant="body2">
              <Link href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cve_id}`} target="_blank" rel="noopener">
                National Vulnerability Database: {vulnerability.cve_id}
              </Link>
            </Typography>
            <Typography variant="body2" sx={{ mt: 1 }}>
              <Link href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vulnerability.cve_id}`} target="_blank" rel="noopener">
                MITRE CVE: {vulnerability.cve_id}
              </Link>
            </Typography>
          </Box>
        </Paper>
      )}
    </Box>
  );
};

export default VulnerabilityDetail;